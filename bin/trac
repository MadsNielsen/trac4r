#!/usr/bin/ruby
$: << File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'rubygems'
require 'gli'
require 'trac4r'
require 'rainbow'
require 'cgi'

include GLI

$opener = RUBY_PLATFORM =~ /darwin/ ? 'open' : nil

config_file '.trac4r'

desc 'Command to use to open URLs'
default_value $opener
flag [:o,:open]

desc 'URL to trac'
flag [:url]

desc 'Your username'
flag [:u,:user]

desc 'Your password'
flag [:p,:password]

desc 'Do not colorize output'
switch [:nocolor]

desc 'Open the ticket or wiki page'
arg_name 'the id of the ticket or name of wiki page'
command :open do |c|
  c.action do |global_options,options,args|
    raise "You must supply a ticket ID or WikiName" if args.empty?
    id = args[0]
    if id =~ /^\d+$/
      system "#{global_options[:o]} #{$url}/ticket/#{id}"
    else
      system "#{global_options[:o]} #{$url}/wiki/#{args.map{ |x| x[0..0].upcase + x[1..-1]}.join('')}"
    end
  end
end

desc 'Go to the new ticket web interface'
long_desc 'Navigates your browser to the web interface, initialized with the values you provide, but does not actually create the ticket'
arg_name 'summary for the ticket'
command [:newticket] do |c|
  c.desc 'component'
  c.flag [:c,:component]

  c.desc 'type'
  c.flag [:t,:type]

  c.desc 'priority'
  c.flag [:p,:priority]

  c.action do |global_options,options,args|
    query_params = {}
    query_params['priority'] = options[:p] if options[:p]
    query_params['component'] = options[:c] if options[:c]
    query_params['type'] = options[:t] if options[:t]
    query_params['summary'] = args.join(' ')
    query_string = ''
    query_params.each do |key,value|
      query_string += key
      query_string += '='
      query_string += CGI.escape(value)
      query_string += '&'
    end

    url = $url.gsub(/\/xmlrpc/,'') + '/newticket?' + query_string
    system "#{global_options[:o]} \"#{url}\""
  end
end

desc 'Lists tickets'
arg_name 'ticket ids (blank for all)'
command [:tickets,:ls] do |c|
  c.desc 'Show tickets accepted'
  c.switch [:a,:accepted]

  c.desc 'Component'
  c.flag [:c,:component]

  c.desc 'Show full description'
  c.switch [:l,:description]

  c.desc 'Arbitrary query (flags are included, too)'
  c.flag [:q,:query]

  c.desc 'Owner ("ME" for the -u user)'
  c.flag [:o,:ownber]

  c.action do |global_options,options,args|
    opts = {}

    if options[:q]
      raise "bad query" if options[:q] =~ /\}/
      opts = instance_eval('{' + options[:q] + '}')
    else
      opts[:owner] = options[:o]
      opts[:owner] = global_options[:u] if options[:o] == "ME"
      if options[:a]
        opts[:status] = :accepted
      else
        opts[:status] = ["!closed","testing"]
      end
      opts[:component] = options[:c] if options[:c]
    end
    ids = args
    ids = $trac.tickets.query(opts) if ids.empty?
    tickets = ids.map{ |id| $trac.tickets.get(id) } 
    tickets.sort{ |a,b| a.summary.downcase <=> b.summary.downcase }.each do |ticket|
      if global_options[:nocolor]
        printf "%5s - %8s - %s\n", ("#" + ticket.id.to_s),ticket.status,ticket.summary
      else
        printf "%14s - %17s - %s\n", ("#" + ticket.id.to_s.foreground(:green)),ticket.status.foreground(:cyan),ticket.summary.underline
      end
      if (options[:l])
        description = ticket.description
        if !global_options[:nocolor]
          description = bold(description)
          description = italic(description)
          description = code(description)
        end
        puts 
        puts "#{description}"
        puts "----"
      end
    end
  end
end

def bold(string)
  desc = string.split("'''")
  description = ""
  bold = false
  desc.each do |part|
    description << part.bright.foreground(:cyan) if bold
    description << part.reset if !bold
    bold = !bold
  end
  description
end

def italic(string)
  desc = string.split("''")
  description = ""
  bold = false
  desc.each do |part|
    description << part.italic.foreground(:magenta) if bold
    description << part.reset if !bold
    bold = !bold
  end
  description
end

def code(string)
  desc = string.split("`")
  description = ""
  bold = false
  desc.each do |part|
    description << part.bright.foreground(:green) if bold
    description << part.reset if !bold
    bold = !bold
  end
  in_code = false
  coded = ''
  description.split(/\n/).each do |line|
    ignore = false
    if line =~ /^\{\{\{\s*$/
      in_code = true
      ignore = true
    elsif line =~ /^\}\}\}/
      in_code = false
      ignore = true
    end
    if !ignore
      if in_code
        coded += line.bright.foreground(:green)
      else
        coded += line
      end
    end
    coded += "\n"
  end
  coded
end

pre do |global,command,options,args|
  if command.nil? || command.name == :help
    # not creating a trac instance
  else
    $url = global[:url]
    raise "You must specify a URL" if $url.nil?
    $trac = Trac.new($url,global[:u],global[:p])
  end
  true
end

post do |global,command,options,args|
  # Post logic here
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

GLI.run(ARGV)
